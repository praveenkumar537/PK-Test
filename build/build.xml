<project name="AROps Deploy" default="deployCheckOnly" basedir="." xmlns:sf="antlib:com.salesforce">

  <!-- Declare properties -->
  <property name="src.dir" location="../src"/>
  <property name="src.orange62.dir" location="../orange62/src"/>
  <property name="src.gbtracking.dir" location="../gb_tracking_src"/>
  <property name="destructive.dir" location="./destructive"/>
  <property name="rollback.dir" location="./rollback"/>
  <property name="undeploy.dir" location="./undeploy"/>
  <property name="properties.dir" location="./properties"/>
  <property name="lib.dir" location="./lib"/>
  <property name="retrieved.dir" location="../retrieved" />
  <property name="credentials.properties.path" location="${properties.dir}/credentials.properties"/>
  <property name="build.properties.path" location="${properties.dir}/build.properties"/>
  <property name="runTests" value="false" />

  <!-- Include files -->
  <property file="${credentials.properties.path}"/>
  <property file="${build.properties.path}"/>

  <!-- Load libs -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${lib.dir}/ant-contrib-1.0b3.jar"/>
  <taskdef uri='antlib:com.salesforce' resource='com/salesforce/antlib.xml' classpath='${lib.dir}/ant-salesforce.jar' />

  <!-- ###################################### -->
  <!-- TARGETS FOR DIFFERENT DEPLOY PURPOSES  -->
  <!-- ###################################### -->

  <!-- deploy all code -->
  <target name="deploy" depends="setupBuild" description="deploy complete app ..." >
      <echo message="Login user : ${sf.username}" />
      <echo message="Login server : ${sf.serverurl}" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployroot="${src.dir}" runAllTests="${runTests}" maxPoll="${sf.maxPoll}" checkOnly="false" ignoreWarnings="true" rollbackOnError="true" pollWaitMillis="${sf.pollWaitMillis}" />
  </target>
  <target name="deployOrange62" depends="setupBuild" description="deploy complete app ..." >
      <echo message="Login user : ${sf.username}" />
      <echo message="Login server : ${sf.serverurl}" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployroot="${src.orange62.dir}" runAllTests="${runTests}" maxPoll="${sf.maxPoll}" checkOnly="false" ignoreWarnings="true" rollbackOnError="true" pollWaitMillis="${sf.pollWaitMillis}" />
  </target>
  <target name="deployGbTracking" depends="setupBuild" description="deploy complete app ..." >
      <echo message="Login user : ${sf.username}" />
      <echo message="Login server : ${sf.serverurl}" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployroot="${src.gbtracking.dir}" runAllTests="${runTests}" maxPoll="${sf.maxPoll}" checkOnly="false" ignoreWarnings="true" rollbackOnError="true" pollWaitMillis="${sf.pollWaitMillis}" />
  </target>

  <!-- deploy all code and run ftests via Jenkins -->
  <target name="deployJenkins" depends="deploy, jenkinsFTests" description="deploy complete app, run ftests and log results in Jenkins" >
      <echo message="deployJenkins" />
  </target>

  <!-- deployCheckOnly -->
  <target name="deployCheckOnly" depends="setupBuild" description="psuedo deploy of code">
      <echo message="Login user : ${sf.username}" />
      <echo message="Login server : ${sf.serverurl}" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployroot="${src.dir}" runAllTests="${runTests}" maxPoll="${sf.maxPoll}" checkOnly="true" ignoreWarnings="true" rollbackOnError="true" pollWaitMillis="${sf.pollWaitMillis}" />
  </target>
  <target name="deployCheckOnlyOrange62" depends="setupBuild" description="psuedo deploy of code">
      <echo message="Login user : ${sf.username}" />
      <echo message="Login server : ${sf.serverurl}" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployroot="${src.orange62.dir}" runAllTests="${runTests}" maxPoll="${sf.maxPoll}" checkOnly="true" ignoreWarnings="true" rollbackOnError="true" pollWaitMillis="${sf.pollWaitMillis}" />
  </target>
  <target name="deployCheckOnlyGbTracking" depends="setupBuild" description="psuedo deploy of code">
      <echo message="Login user : ${sf.username}" />
      <echo message="Login server : ${sf.serverurl}" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployroot="${src.gbtracking.dir}" runAllTests="${runTests}" maxPoll="${sf.maxPoll}" checkOnly="true" ignoreWarnings="true" rollbackOnError="true" pollWaitMillis="${sf.pollWaitMillis}" />
  </target>
  <!-- retrieve project code based on package.xml -->
  <target name="retrieveCode">
    <mkdir dir="${retrieved.dir}"/>
    <copy file="${src.dir}/package.xml" todir="${retrieved.dir}" />
    <sf:retrieve username="${sf.username}" password="${sf.password}" maxPoll="9999" serverurl="${sf.serverurl}" retrieveTarget="${retrieved.dir}" unpackaged="${retrieved.dir}/package.xml"/>
  </target>

  <!-- task that sets xmls for prior to deployment -->
  <target name="setupBuild" description="setting up build prior to deployment" >
    <if>
      <equals arg1="${deployType}" arg2="destroy" />
      <then>
        <echo message="you better know what you're doing, this is a destructive deploy !!!"/>
        <copy file="${destructive.dir}/destructiveChangesPost.xml" todir="${src.dir}" overwrite="true" force="true" />
        <copy file="${destructive.dir}/destructiveChangesPre.xml" todir="${src.dir}" overwrite="true" force="true" />
      </then>
    <elseif>
      <equals arg1="${deployType}" arg2="rollback" />
        <then>
          <echo message="it's always sad to do a rollback deploy :("/>
          <copy file="${rollback.dir}/destructiveChangesPost.xml" todir="${src.dir}" overwrite="true" force="true" />
          <copy file="${rollback.dir}/destructiveChangesPre.xml" todir="${src.dir}" overwrite="true" force="true" />
        </then>
    </elseif>
      <else>
        <echo message="sit back and watch a normal deploy :)"/>
      </else>
    </if>
  </target>


  <!-- ############################## -->
  <!-- TASK FOR JENKINS TEST ANALYSIS -->
  <!-- ############################## -->

  <!-- Run ftests via jenkins -->
  <target name="jenkinsFTests" description="run ftests and log results in Jenkins">
    <!-- Modify perms to files used to create manifest -->
    <chmod file="./ftests/resource/manifestClasses.txt" perm="777"/>
    <chmod file="./ftests/resource/generateManifest.sh" perm="a+x"/>

    <!-- Add test class names to manifest file -->
    <exec executable="./ftests/resource/generateManifest.sh" failonerror="true" />

    <!-- Compile pom via maven -->
    <exec dir="./ftests" executable="mvn">
      <arg line="-f pom.xml compile exec:java" />
      <arg line="-Dexec.mainClass='com.sforce.automation.apexFtest.runner.FtestRunner'" />
      <arg line="-DmanifestFileLocation=manifestClasses.txt" />
      <arg line="-Dserver.URL=${sf.serverurl}/services/Soap/u/33.0" />
      <arg line="-Dserver.username=${sf.username}" />
      <arg line="-Dserver.password=${sf.password}" />
    </exec>
  </target>

  <!-- =================================
          target: undeploy
         ================================= -->
    <target name="undeploy" description="used to remove deployed code">
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployroot="${undeploy.dir}" singlepackage="true" maxpoll="2000" runalltests="false"></sf:deploy>
    </target>

  <!-- =================================
          target: undeployCheckOnly
         ================================= -->
    <target name="undeployCheckOnly" description="used to make sure an undeploy of code will work properly">
        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployroot="${undeploy.dir}" singlepackage="true" checkonly="true" maxpoll="2000" runalltests="false"></sf:deploy>
      </target>
</project>
